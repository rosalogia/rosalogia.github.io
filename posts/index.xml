<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Ambika Eshwar</title>
        <link>/posts/</link>
        <description>Recent content in Posts on Ambika Eshwar</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Sat, 12 Sep 2020 17:10:35 -0400</lastBuildDate>
        <atom:link href="/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Configuring Saturn to Use Postgres</title>
            <link>/posts/configuring-saturn-to-use-postgres/</link>
            <pubDate>Sat, 12 Sep 2020 17:10:35 -0400</pubDate>
            
            <guid>/posts/configuring-saturn-to-use-postgres/</guid>
            <description>Saturn is a modern MVC-oriented web framework for F# built on .NET Core, making it a suitable option for cross-platform development and deployment on unix-like operating systems, which for me is a must. The F# community is really enthusiastic about a feature of the F# language and environment which they lovingly refer to as type providers. When it comes to type providers, the objective is usually to provide some kind of immediate and type-safe mapping between an external data source and your F# codebase.</description>
            <content type="html"><![CDATA[<p><a href="https://saturnframework.org/">Saturn</a> is a modern MVC-oriented web framework for F# built
on .NET Core, making it a suitable option for cross-platform development and deployment
on unix-like operating systems, which for me is a must. The F# community is really
enthusiastic about a feature of the F# language and environment which they lovingly
refer to as <a href="https://docs.microsoft.com/en-us/dotnet/fsharp/tutorials/type-providers/">type providers</a>.
When it comes to type providers, the objective is usually to provide some kind of immediate
and type-safe mapping between an external data source and your F# codebase. This is immensely
convenient since in F#, as with any functional language, types are a major source of developer power.
Being able to generate types from structured external data for use within your F# code removes
a lot of the hassle and worry that might otherwise accompany any effort to access external data.</p>
<p>However, being a .NET language, for a long while much of the documentation and guidance online
for F# was oriented toward Windows and Visual Studio users. Although they were appealing, I had
a difficult time trying to make use of the SQL providers on Linux, and for a long while this turned me
away from attempting any web development in F#. Although I&rsquo;m sure the situation has improved on that
front, I decided to see how easy it would be to use PostgreSQL on Linux with Saturn compared to my
attempt to use it with <a href="https://suave.io/">Suave</a> in 2017. It didn&rsquo;t take very long, but for future
reference (for myself) I&rsquo;ve decided to lay out the process here.</p>
<h2 id="setting-up-a-saturn-project">Setting up a Saturn Project</h2>
<p>Saturn provides really convenient tooling for setting up your project. If you already have
.NET Core 3.1 installed, you can execute the following in a directory of your choice to get
a working project put together for you:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sh" data-lang="sh">dotnet new -i Saturn.Template
mkdir SaturnSample <span style="color:#f92672">&amp;&amp;</span> cd SaturnSample
dotnet new saturn -lang F#
dotnet tool restore
dotnet saturn gen Book Books id:string title:string author:string
</code></pre></div><p>Open the file <code>…/SaturnSample/src/SaturnSample/Router.fs</code> and add the specified line:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-fsharp" data-lang="fsharp"><span style="color:#75715e">// This is the part of the file you&#39;re editing
</span><span style="color:#75715e"></span><span style="color:#66d9ef">let</span> browserRouter <span style="color:#f92672">=</span> router <span style="color:#f92672">{</span>
  not_found_handler <span style="color:#f92672">(</span>htmlView NotFound.layout<span style="color:#f92672">)</span>
  pipe_through browser

  forward <span style="color:#e6db74">&#34;&#34;</span> defaultView
  <span style="color:#75715e">// This is the line you&#39;re adding
</span><span style="color:#75715e"></span>  forward <span style="color:#e6db74">&#34;/books&#34;</span> Books.Controller.resource
<span style="color:#f92672">}</span>
</code></pre></div><p>These instructions are taken directly from the <a href="https://saturnframework.org/tutorials/how-to-start.html">How to Start</a>
guide provided in the Saturn documentation, and if you&rsquo;d like further information about what they do you should check
them out there. I excluded the migration and build steps, but that&rsquo;s because I want to change the project to
use PostgreSQL before we migrate and build. Know, however, that if you&rsquo;ve already migrated and built your project for
SQLite, the rest of this guide can still be followed exactly without any problems. Simple.Migrations will run the migration
again for PostgreSQL once you make the necessary changes.</p>
<h2 id="setting-up-a-postgresql-database-with-docker">Setting up a PostgreSQL Database with Docker</h2>
<p>Although it&rsquo;s not at all necessary that you use Docker for this, I prefer containerising my databases
especially for scrap projects like this. If you&rsquo;d like to set up a local bare-metal installation of
PostgreSQL, you are free to do so.</p>
<p>With Docker installed and the Docker service enabled, run the following:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sh" data-lang="sh">docker run --name your-container-name -e POSTGRES_PASSWORD<span style="color:#f92672">=</span>your_password -p 5432:5432 -d postgres
</code></pre></div><p>This will create a <code>-d</code>etached container named <code>your-container-name</code> with an environment variable <code>POSTGRES_PASSWORD</code> set
to <code>your_password</code>, mapping your local port <code>5432</code> to port <code>5432</code> in the container, and finally it will run <code>postgres</code>
within the container. If you want to be sure that it works, you can try connecting to it locally (if you have PostgreSQL
and subsequently <code>psql</code> installed):</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sh" data-lang="sh">psql -h localhost -p <span style="color:#ae81ff">5432</span> postgres -U postgres -W <span style="color:#75715e"># You will be prompted for a password</span>
</code></pre></div><p>You should be met with the standard PostgreSQL prompt, connected to the database <code>postgres</code>, which you can quit with <code>\q</code>.</p>
<h2 id="adjusting-your-saturn-project-to-use-npgsql">Adjusting Your Saturn Project to Use Npgsql</h2>
<p>Before we adjust the code that sets up the database connection, we should add Npgsql as a dependency in our project.
The files we need to modify are the following:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sh" data-lang="sh">…/SaturnSample/paket.dependencies
…/SaturnSample/paket.lock
…/SaturnSample/src/Migrations/paket.references
…/SaturnSample/src/SaturnSample/paket.references
</code></pre></div><p>To learn more about the different Paket files, what their unique purposes are and how they work together, you
can read about it <a href="https://fsprojects.github.io/Paket/">here</a>.</p>
<p>In <code>…/SaturnSample/paket.dependencies</code>, find the line where <code>Microsoft.Data.Sqlite</code> is listed (the entire line should
read <code>nuget Microsoft.Data.Sqlite</code>) and right above or below it, add the following line:</p>
<pre><code>nuget Npgsql
</code></pre><p>In <code>…/SaturnSample/paket.lock</code>, beneath the line that reads <code>remote: https://api.nuget.org/v3/index.json</code>,
include the following line with the version of Npgsql you want to use. I&rsquo;m using the <a href="https://www.nuget.org/packages/Npgsql/">latest</a>
as of September 12th 2020:</p>
<pre><code>Npgsql (4.1.4)
</code></pre><p>In <code>…/SaturnSample/src/Migrations/paket.references</code> and <code>…/SaturnSample/src/SaturnSample/paket.references</code>, simply
add a line:</p>
<pre><code>Npgsql
</code></pre><p>You can include it above or beneath <code>Microsoft.Data.Sqlite</code>.</p>
<p>In the root directory of your project, run <code>dotnet restore</code> to install <code>Npgsql</code>.</p>
<h2 id="adjusting-the-migrations-code">Adjusting the Migrations Code</h2>
<p>Thankfully for us, we don&rsquo;t need to change much at all to make our project, by default configured for SQLite,
fully compatible with a PostgreSQL database.</p>
<p>Open up <code>…/SaturnSample/src/Migrations/Program.fs</code>. You should see the following:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-fsharp" data-lang="fsharp"><span style="color:#66d9ef">module</span> Program

<span style="color:#66d9ef">open</span> System.Reflection
<span style="color:#66d9ef">open</span> SimpleMigrations
<span style="color:#66d9ef">open</span> Microsoft.Data.Sqlite
<span style="color:#66d9ef">open</span> SimpleMigrations.DatabaseProvider
<span style="color:#66d9ef">open</span> SimpleMigrations.Console


<span style="color:#f92672">[&lt;</span>EntryPoint<span style="color:#f92672">&gt;]</span>
<span style="color:#66d9ef">let</span> main argv <span style="color:#f92672">=</span>
    <span style="color:#66d9ef">let</span> assembly <span style="color:#f92672">=</span> Assembly.GetExecutingAssembly()
    <span style="color:#66d9ef">use</span> db <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> SqliteConnection <span style="color:#e6db74">&#34;DataSource=src/SaturnSample/database.sqlite&#34;</span>
    <span style="color:#66d9ef">let</span> provider <span style="color:#f92672">=</span> SqliteDatabaseProvider<span style="color:#f92672">(</span>db<span style="color:#f92672">)</span>
    <span style="color:#66d9ef">let</span> migrator <span style="color:#f92672">=</span> SimpleMigrator<span style="color:#f92672">(</span>assembly<span style="color:#f92672">,</span> provider<span style="color:#f92672">)</span>
    <span style="color:#66d9ef">let</span> consoleRunner <span style="color:#f92672">=</span> ConsoleRunner<span style="color:#f92672">(</span>migrator<span style="color:#f92672">)</span>
    consoleRunner<span style="color:#f92672">.</span>Run<span style="color:#f92672">(</span>argv<span style="color:#f92672">)</span> <span style="color:#f92672">|&gt;</span> ignore
    0
</code></pre></div><p>The only SQLite specific parts of this code are the following lines:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-fsharp" data-lang="fsharp"><span style="color:#66d9ef">use</span> db <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> SqliteConnection <span style="color:#e6db74">&#34;DataSource=src/SaturnSample/database.sqlite&#34;</span>
<span style="color:#66d9ef">let</span> provider <span style="color:#f92672">=</span> SqliteDatabaseProvider<span style="color:#f92672">(</span>db<span style="color:#f92672">)</span>
</code></pre></div><p>Changing this is simple. Make sure you <code>open Npgsql</code> underneath or below <code>open Microsoft.Data.Sqlite</code>.
Once you&rsquo;ve done that, go ahead and make the following changes:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-fsharp" data-lang="fsharp"><span style="color:#75715e">// Change use db = new SqliteConnection &#34;...&#34; to
</span><span style="color:#75715e"></span><span style="color:#66d9ef">use</span> db <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> NpgsqlConnection <span style="color:#e6db74">&#34;Host=localhost;Username=postgres;Password=your_password;Database=postgres&#34;</span>
<span style="color:#75715e">// Change let provider = SqliteDatabaseProvider(db) to
</span><span style="color:#75715e"></span><span style="color:#66d9ef">let</span> provider <span style="color:#f92672">=</span> PostgresqlDatabaseProvider<span style="color:#f92672">(</span>db<span style="color:#f92672">)</span>
</code></pre></div><p>One last change before we migrate and build our project: in <code>…/SaturnSample/src/SaturnSample/Program.fs</code>,
change the following line:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-fsharp" data-lang="fsharp"><span style="color:#75715e">// Change use_config (fun _ -&gt; {connectionString = &#34;DataSource=src/SaturnSample/database.sqlite&#34;} ) to
</span><span style="color:#75715e"></span>use_config <span style="color:#f92672">(</span><span style="color:#66d9ef">fun</span> <span style="color:#f92672">_</span> <span style="color:#f92672">-&gt;</span> <span style="color:#f92672">{</span>connectionString <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Host=localhost;Username=postgres;Password=your_password;Database=postgres&#34;</span><span style="color:#f92672">}</span> <span style="color:#f92672">)</span>
</code></pre></div><p>This is not exactly necessary, as development time configuration has not fully been implemented to my knowledge, but if it
will be implemented in the near future, it&rsquo;s not a bad idea to have be prepared to take advantage of it.</p>
<p>Simple.Migrations only needs an initialised DatabaseProvider to work with, so all we had to do was make sure we created
and passed a PostgresqlDatabaseProvider instead of a SqliteDatabaseProvider, which we can do easily with Npgsql.</p>
<h1 id="migrating-and-building">Migrating and Building</h1>
<p>This is the easiest step. The following commands should successfully create a table for the <code>Book</code> model we generated
earlier, and then build and run your application:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sh" data-lang="sh">dotnet saturn migration
dotnet fake build -t run
</code></pre></div><p>Once the project finishes building and running, you should be able to interact with the part you added at
<a href="https://localhost:8085/books">https://localhost:8085/books</a>.</p>
<p>Enjoy developing full-stack F# web applications on Linux with <a href="https://saturnframework.org">Saturn</a>!</p>
]]></content>
        </item>
        
        <item>
            <title>Python for the AP CS A Student</title>
            <link>/posts/java-to-python/</link>
            <pubDate>Mon, 07 Sep 2020 02:00:50 -0400</pubDate>
            
            <guid>/posts/java-to-python/</guid>
            <description>The bulk of the content I plan on including in this site has to do with helping less experienced programmers in my class familiarise themselves with programming tools, practices and environments that are more common and useful outside of an academic [or, at least, undergraduate] environment. Python is a simple and powerful programming language that sees a lot of use in professional, casual and open-source spaces, and knowing it can make you more employable but can also help you make your life easier or participate in open source projects that interest you.</description>
            <content type="html"><![CDATA[<p>The bulk of the content I plan on including in this site has to do with helping less experienced programmers in my class familiarise themselves with programming tools, practices and environments that are more common and useful outside of an academic [or, at least, undergraduate] environment. Python is a simple and powerful programming language that sees a lot of use in professional, casual and open-source spaces, and knowing it can make you more employable but can also help you make your life easier or participate in open source projects that interest you.</p>
<p>The objective of this guide is to help a student whose only exposure to programming so far was an AP Computer Science A (or equivalent, e.g. Introductory Computer Science in most universities) course, in which Java was the language of instruction, get familiar with Python and its syntax. This is not a comprehensive language guide. Instead, it includes some useful information as well as some syntax comparisons. I would appreciate comments regarding the extent to which this guide is helpful and ways in which you feel it might be improved.</p>
<ul>
<li><a href="#before-beginning-">Before Beginning &hellip;</a>
<ul>
<li><a href="#why-a-new-language-">Why a New Language?</a></li>
</ul>
</li>
<li><a href="#syntax-comparisons">Syntax Comparisons</a>
<ul>
<li><a href="#hello-world">Hello World</a></li>
<li><a href="#data-and-types">Data and Types</a></li>
<li><a href="#decision-making">Decision Making</a></li>
<li><a href="#more-complex-data-and-iteration">More Complex Data and Iteration</a>
<ul>
<li><a href="#built-in-data-structures">Built-In Data Structures</a></li>
<li><a href="#note-on-functions-and-methods">Note on Functions and Methods</a></li>
<li><a href="#custom-data-types--classes">Custom Data Types: Classes</a></li>
</ul>
</li>
<li><a href="#file-io">File IO</a></li>
</ul>
</li>
<li><a href="#synthesis">Synthesis</a></li>
<li><a href="#closure">Closure</a></li>
</ul>
<h2 id="before-beginning-">Before Beginning &hellip;</h2>
<p><strong>NOTE</strong>: This section includes some information I think will help beginners convince themselves that learning another programming language, particularly Python, is worth their time. If you are convinced, feel free to skip this section.</p>
<h3 id="why-a-new-language">Why a New Language?</h3>
<p>After anywhere between a semester and a full academic year of writing Java in Eclipse or whichever programming environment your professor introduced you to, the thought of learning new languages and new tools can seem intimidating, unnecessary and tiring among other things. Is it worth it?</p>
<p>The answer, for a few reasons, is <em>almost certainly</em>.</p>
<p>One important thing to consider (that you might not be aware of if your only exposure to programming languages is Java) is that the vast majority of programming languages are syntactically and ideologically similar to one another. This is not an exaggeration designed to trick you into wasting your time, but rather a widely acknowledged fact. Now that you have learned and become reasonably comfortable with one object-oriented programming language, many others will come very easily to you.</p>
<p>There is, in my strong opinion, an even greater reason to learn a language and environment other than those to which you were introduced in high school or your first semester CS course, however:</p>
<p>The language and tools you were introduced to when you were beginning to program <em>suck</em>. They&rsquo;re either bad, or really, really bad. Sometimes this is because of old conventions hanging around in &ldquo;modern&rdquo; computer science curricula. Other times, your professors intentionally ask you to use inconvenient tools because they are preparing you for an inconvenient exam.</p>
<p>Programming isn&rsquo;t meant to be inconvenient, though, and forcing yourself to suffer inconvenience will not make you a better programmer. Renowned programmer Larry Wall, creator of the Perl language and the <code>patch</code> unix utility, outlines <a href="http://threevirtues.com/">three virtues</a> that any programmer should have:</p>
<ol>
<li><strong>Laziness</strong>: The quality that makes you go to great effort to reduce overall energy expenditure. It makes you write labor-saving programs that other people will find useful and document what you wrote so you don&rsquo;t have to answer so many questions about it.</li>
<li><strong>Impatience</strong>: The anger you feel when the computer is being lazy. This makes you write programs that don&rsquo;t just react to your needs, but actually anticipate them. Or at least pretend to.</li>
<li><strong>Hubris</strong>: The quality that makes you write (and maintain) programs that other people won&rsquo;t want to say bad things about.</li>
</ol>
<p>The Java programming language has fallen behind its competitors in terms of design and features that make it convenient to use, the reason being that throughout its history, Java has been held back by the needs and demands of massive corporate entities, including hospitals, banks, pharmaceutical companies, etc.</p>
<p>Corporations whose interests are not in cutting-edge software or software development, but rather the opposite. Corporations who <em>fear</em> innovation, as innovation may bring with it breaking changes to their applications, which in turn bring major losses in profit. These corporations, for the longest time, have been Java&rsquo;s primary investors, in turn rewarding <a href="https://en.wikipedia.org/wiki/Oracle_Corporation">Oracle</a> for ensuring that the language did not change too much over the years, and instead stayed relatively the same for as long as possible.</p>
<p>Many programming languages that are maintained by the open source community, and even those that are maintained and developed by competitors of Oracle, have left Java in the dust, even though Java has made meager attempts to catch up in recent years. Languages like C#, Python, Ruby, and JavaScript among others have gained popularity while also becoming more and more convenient for programmers to use every year.</p>
<p>As you explore the programming landscape online, you will find that while Java continues to be a &ldquo;popular&rdquo; language, this is mostly so due to its heavy academic and corporate usage. In reality, Java is becoming less and less popular as the language of choice for programmers who are given one. Many of the open source projects you will discover on the internet are written in more convenient languages, and Python is among the most popular of them. That&rsquo;s not to say, however, that it is seeing neglect or lack of use in professional spaces. As of 2019, Python ranks above Java in terms of popularity among professional developers in Stack Overflow&rsquo;s annual developer surveys, and is second only to JavaScript.</p>
<p>There are infinitely more reasons to familiarise yourself with and even master the Python programming language, but you are sure to find them more gracefully articulated elsewhere on the internet. Hopefully this amount will do to convince you that the rest of this guide will be worth your time.</p>
<h2 id="syntax-comparisons">Syntax Comparisons</h2>
<p>Note on environment: there is no need to install an entire development environment and tool-chain for this short tutorial. Instead you can use <a href="https://repl.it/languages/python">repl.it</a>, an online platform for writing, running, and sharing code.</p>
<h3 id="hello-world">Hello World</h3>
<p>The most basic Python program is shown here:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;Hello World&#34;</span>)
</code></pre></div><p>By comparison, the most &ldquo;basic&rdquo; Java program, one which does the very same thing as this single-line Python program, is a lot longer:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Main</span> <span style="color:#f92672">{</span>
    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">main</span><span style="color:#f92672">(</span>String<span style="color:#f92672">[]</span> args<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
        System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Hello World&#34;</span><span style="color:#f92672">);</span>
    <span style="color:#f92672">}</span>
<span style="color:#f92672">}</span>
</code></pre></div><p>Closer inspection of the two samples will yield more noteworthy details. For example, notice that Python does not require that you end statements in semicolons as does Java. Furthermore, there is no need in Python to create a &ldquo;Main&rdquo; class or a &ldquo;main&rdquo; method. The code that is in a Python file is run as is. Although Python is an object-oriented language, it is entirely possible to write Python code that does not make use of classes.</p>
<h3 id="data-and-types">Data and Types</h3>
<p>In Java you were introduced to several different data types which stored different categories of information and occasionally had to be treated differently. For example:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Main</span> <span style="color:#f92672">{</span>
	<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">main</span><span style="color:#f92672">(</span>String<span style="color:#f92672">[]</span> args<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
		<span style="color:#66d9ef">int</span> anInteger <span style="color:#f92672">=</span> 2<span style="color:#f92672">;</span>
		<span style="color:#66d9ef">double</span> decimalNumber <span style="color:#f92672">=</span> 2<span style="color:#f92672">.</span><span style="color:#a6e22e">0</span><span style="color:#f92672">;</span>
		String textInformation <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Some text&#34;</span><span style="color:#f92672">;</span>
		<span style="color:#66d9ef">boolean</span> truthyInformation <span style="color:#f92672">=</span> <span style="color:#66d9ef">false</span><span style="color:#f92672">;</span>
		<span style="color:#75715e">// And sometimes they can work together or produce one another
</span><span style="color:#75715e"></span>		String combinedString <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;The number two: &#34;</span> <span style="color:#f92672">+</span> anInteger<span style="color:#f92672">;</span> <span style="color:#75715e">// The number two: 2
</span><span style="color:#75715e"></span>		<span style="color:#66d9ef">boolean</span> isTwoTwo <span style="color:#f92672">=</span> anInteger <span style="color:#f92672">==</span> decimalNumber<span style="color:#f92672">;</span> <span style="color:#75715e">// true
</span><span style="color:#75715e"></span>		<span style="color:#66d9ef">int</span> zero <span style="color:#f92672">=</span> anInteger <span style="color:#f92672">-</span> decimalNumber <span style="color:#75715e">// 0
</span><span style="color:#75715e"></span>	<span style="color:#f92672">}</span>
<span style="color:#f92672">}</span>
</code></pre></div><p>Data types exist in Python, but we are under no obligation to be specific about which data type a certain variable might hold. Variables can hold any type of data at any time. This has its pros and cons, but generally it means our code is less cluttered.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">anInteger <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>
decimalNumber <span style="color:#f92672">=</span> <span style="color:#ae81ff">2.0</span>
textInformation <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Some text&#34;</span>
truthyInformation <span style="color:#f92672">=</span> False
<span style="color:#75715e"># And as in Java, we can have them interact</span>
combinedString <span style="color:#f92672">=</span> f<span style="color:#e6db74">&#34;The number two: {anInteger}&#34;</span> <span style="color:#75715e"># The number two: 2</span>
isTwoTwo <span style="color:#f92672">=</span> anInteger <span style="color:#f92672">==</span> decimalNumber
zero <span style="color:#f92672">=</span> anInteger <span style="color:#f92672">-</span> decimalNumber
</code></pre></div><h3 id="decision-making">Decision Making</h3>
<p>The classical construct for decision making in computer programs is the <code>if</code> statement.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Main</span> <span style="color:#f92672">{</span>
	<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">main</span><span style="color:#f92672">(</span>String<span style="color:#f92672">[]</span> args<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
		<span style="color:#66d9ef">int</span> age <span style="color:#f92672">=</span> 18<span style="color:#f92672">;</span>
		 
		<span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>age <span style="color:#f92672">&lt;</span> 21<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
			System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Still not legal.&#34;</span><span style="color:#f92672">);</span>
		<span style="color:#f92672">}</span> <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>age <span style="color:#f92672">==</span> 21<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
			System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Congratulations on becoming legal!&#34;</span><span style="color:#f92672">);</span>
		<span style="color:#f92672">}</span> <span style="color:#66d9ef">else</span> <span style="color:#f92672">{</span>
			System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;You&#39;re legal!&#34;</span><span style="color:#f92672">);</span>
		<span style="color:#f92672">}</span>
	<span style="color:#f92672">}</span>
<span style="color:#f92672">}</span>
</code></pre></div><p>A similar program in Python is just as simple:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">age <span style="color:#f92672">=</span> <span style="color:#ae81ff">18</span>

<span style="color:#66d9ef">if</span> age <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">21</span>:
    <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;Still not legal.&#34;</span>)
<span style="color:#66d9ef">elif</span> age <span style="color:#f92672">==</span> <span style="color:#ae81ff">21</span>:
    <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;Congratulations on becoming legal!&#34;</span>)
<span style="color:#66d9ef">else</span>:
    <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;You&#39;re legal!&#34;</span>)
</code></pre></div><p>Programs with pre-determined input aren&rsquo;t very engaging, though. Let&rsquo;s try getting some user input from the console. In Java this is a little complicated:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#f92672">import</span> java.util.Scanner<span style="color:#f92672">;</span>

<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Main</span> <span style="color:#f92672">{</span>
	<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">main</span><span style="color:#f92672">(</span>String<span style="color:#f92672">[]</span> args<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
		Scanner scanner <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Scanner<span style="color:#f92672">(</span>System<span style="color:#f92672">.</span><span style="color:#a6e22e">in</span><span style="color:#f92672">);</span>
		System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;How old are you?&#34;</span><span style="color:#f92672">);</span>
		<span style="color:#66d9ef">int</span> age <span style="color:#f92672">=</span> scan<span style="color:#f92672">.</span><span style="color:#a6e22e">nextInt</span><span style="color:#f92672">();</span>
		
		scan<span style="color:#f92672">.</span><span style="color:#a6e22e">close</span><span style="color:#f92672">();</span>
		
		<span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>age <span style="color:#f92672">&lt;</span> 21<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
			System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Still not legal.&#34;</span><span style="color:#f92672">);</span>
		<span style="color:#f92672">}</span> <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>age <span style="color:#f92672">==</span> 21<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
			System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Congratulations on becoming legal!&#34;</span><span style="color:#f92672">);</span>
		<span style="color:#f92672">}</span> <span style="color:#66d9ef">else</span> <span style="color:#f92672">{</span>
			System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;You&#39;re legal!&#34;</span><span style="color:#f92672">);</span>
		<span style="color:#f92672">}</span>
	<span style="color:#f92672">}</span>
<span style="color:#f92672">}</span>
</code></pre></div><p>By comparison, this is a lot simpler in Python:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">age <span style="color:#f92672">=</span> int(input(<span style="color:#e6db74">&#34;How old are you?&#34;</span>)) <span style="color:#75715e"># Prompt the user to enter their age, then convert the resulting string into an integer</span>

<span style="color:#66d9ef">if</span> age <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">21</span>:
    <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;Still not legal.&#34;</span>)
<span style="color:#66d9ef">elif</span> age <span style="color:#f92672">==</span> <span style="color:#ae81ff">21</span>:
    <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;Congratulations on becoming legal!&#34;</span>)
<span style="color:#66d9ef">else</span>:
    <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;You&#39;re legal!&#34;</span>)
</code></pre></div><p>Python is designed with simplicity for convenient little command-line programs in mind, and yet it still sees heavy use in fields like data science, web development and cyber security.</p>
<h3 id="more-complex-data-and-iteration">More Complex Data and Iteration</h3>
<h4 id="built-in-data-structures">Built-In Data Structures</h4>
<p>Java offered us more than primitive data types for holding single values. It gave us access to more complex types of data, like arrays, ArrayLists and HashMaps. Data types that hold other data types in a specific form or shape are called data structures. Let&rsquo;s look at how some of the native data structures in Java are used and compare that code to a Python equivalent.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Main</span> <span style="color:#f92672">{</span>
	<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">main</span><span style="color:#f92672">(</span>String<span style="color:#f92672">[]</span> args<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
		<span style="color:#66d9ef">int</span><span style="color:#f92672">[]</span> ages <span style="color:#f92672">=</span> <span style="color:#f92672">{</span>14<span style="color:#f92672">,</span> 18<span style="color:#f92672">,</span> 22<span style="color:#f92672">,</span> 25<span style="color:#f92672">};</span>
		<span style="color:#75715e">// Now let&#39;s iterate over the array and print out how many people in this list are legal
</span><span style="color:#75715e"></span>		<span style="color:#66d9ef">int</span> amountLegal <span style="color:#f92672">=</span> 0<span style="color:#f92672">;</span>
		<span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> 0<span style="color:#f92672">;</span> i <span style="color:#f92672">&lt;</span> ages<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span><span style="color:#f92672">;</span> i<span style="color:#f92672">++)</span> <span style="color:#f92672">{</span>
			<span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>ages<span style="color:#f92672">[</span>i<span style="color:#f92672">]</span> <span style="color:#f92672">&gt;=</span> 21<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
				amountLegal<span style="color:#f92672">++;</span>
			<span style="color:#f92672">}</span>
		<span style="color:#f92672">}</span>
		
		System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span>amountLegal <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34; of &#34;</span> <span style="color:#f92672">+</span> ages<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34; people legal&#34;</span><span style="color:#f92672">);</span>
	<span style="color:#f92672">}</span>
<span style="color:#f92672">}</span>
</code></pre></div><p>In the example above, we do the following</p>
<ol>
<li>Create an integer array of ages that we can use a <code>for</code> loop to &ldquo;iterate&rdquo; over</li>
<li>Create an integer variable to store the amount of people in the list who are legal</li>
<li>Iterate over the array with a <code>for</code> loop by creating an index <code>i</code> and incrementing it on every step</li>
<li>Check <code>if</code> the age of each person stored in the array is greater than or equal to 21</li>
<li>Increment the amountLegal variable if it is, don&rsquo;t do anything if it&rsquo;s not</li>
</ol>
<p>But the truth is that this is a lot more complex than it has to be. A Python example will demonstrate why:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">ages <span style="color:#f92672">=</span> [<span style="color:#ae81ff">14</span>, <span style="color:#ae81ff">18</span>, <span style="color:#ae81ff">22</span>, <span style="color:#ae81ff">25</span>]

amountLegal <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>

<span style="color:#66d9ef">for</span> age <span style="color:#f92672">in</span> ages:
    <span style="color:#66d9ef">if</span> age <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">21</span>:
        amountLegal <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span> <span style="color:#75715e"># Set amountLegal to itself + 1</span>

<span style="color:#66d9ef">print</span>(f<span style="color:#e6db74">&#34;{amountLegal} of {ages.length} people legal&#34;</span>)
</code></pre></div><p>The code is a lot shorter, and a lot more self explanatory in Python. If you haven&rsquo;t noticed yet, combining variable values with string literals is a lot cleaner in Python than in Java. Simply include an <code>f</code> before the string literal, and include any variables or expressions in braces to have them evaluated before the string is used anywhere.</p>
<p>Java arrays have some limitations on them. In order to grow and shrink them whenever we want, we need to use an ArrayList. In Python, native arrays (called lists) already implement these functionalities, so we don&rsquo;t need to worry about differentiating between two different data structures that serve, essentially, the same purpose.</p>
<p>Let&rsquo;s look at a HashMap example. If you didn&rsquo;t learn about HashMaps in school, they are a simple data structure for storing &ldquo;key-value pairs&rdquo;. All this means is that instead of &ldquo;looking up&rdquo; or accessing data in a HashMap using a numerical index as we do with arrays, we access data using a &ldquo;key&rdquo; which can be of any given type, and is specified when we create an entry in the HashMap. This is easier to understand through an example:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#f92672">import</span> java.util.HashMap<span style="color:#f92672">;</span>

<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Main</span> <span style="color:#f92672">{</span>
	<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">main</span><span style="color:#f92672">(</span>String<span style="color:#f92672">[]</span> args<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
		HashMap<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">,</span> String<span style="color:#f92672">&gt;</span> phoneBook <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> HashMap<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">,</span> String<span style="color:#f92672">&gt;();</span>
		phoneBook<span style="color:#f92672">.</span><span style="color:#a6e22e">put</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Jess&#34;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;6091234567&#34;</span><span style="color:#f92672">);</span>
		phoneBook<span style="color:#f92672">.</span><span style="color:#a6e22e">put</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Ambika&#34;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;6090987654&#34;</span><span style="color:#f92672">);</span>
		
		<span style="color:#75715e">// and when we want to access a value from the HashMap
</span><span style="color:#75715e"></span>		
		System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Ambika&#39;s phone number: &#34;</span> <span style="color:#f92672">+</span> phoneBook<span style="color:#f92672">.</span><span style="color:#a6e22e">get</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Ambika&#34;</span><span style="color:#f92672">));</span>
	<span style="color:#f92672">}</span>
<span style="color:#f92672">}</span>
</code></pre></div><p>HashMaps are a convenient way to store data that you might want to look up later by name, ID, etc.</p>
<p>Python calls HashMaps &ldquo;dictionaries&rdquo; and makes them easy to work with:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">phoneBook <span style="color:#f92672">=</span> {
    <span style="color:#e6db74">&#34;Jess&#34;</span> : <span style="color:#e6db74">&#34;6091234567&#34;</span>,
    <span style="color:#e6db74">&#34;Ambika&#34;</span> : <span style="color:#e6db74">&#34;6090987654&#34;</span>
}

<span style="color:#66d9ef">print</span>(f<span style="color:#e6db74">&#34;Ambika&#39;s phone number: {phoneBook[&#39;ambika&#39;]}&#34;</span>)
</code></pre></div><h4 id="note-on-functions-and-methods">Note on Functions and Methods</h4>
<p>In Java, your classes can have self-contained snippets of functionality in them called &ldquo;methods&rdquo;. Methods exist in Python and other languages too. However, &ldquo;method&rdquo; is a term that pertains specifically to classes. The more general term for a self-contained snippet of functionality is simply &ldquo;function&rdquo;.</p>
<p>Since in Python not everything needs to be in a class, you might find that you write more functions than methods. Meanwhile, in Java you only ever have the option to write methods.</p>
<p>In Java our methods sometimes looked like this</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Main</span> <span style="color:#f92672">{</span>
	<span style="color:#66d9ef">private</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">greet</span><span style="color:#f92672">(</span>String name<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
		System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Hello &#34;</span> <span style="color:#f92672">+</span> name<span style="color:#f92672">);</span>
	<span style="color:#f92672">}</span>
	
	<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">main</span><span style="color:#f92672">(</span>String<span style="color:#f92672">[]</span> args<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
		greet<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Ambika&#34;</span><span style="color:#f92672">);</span>
	<span style="color:#f92672">}</span>
<span style="color:#f92672">}</span>
</code></pre></div><p>A Python equivalent, using a function instead, looks like this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">greet</span>(name):
    <span style="color:#66d9ef">print</span>(f<span style="color:#e6db74">&#34;Hello {name}&#34;</span>)
</code></pre></div><p><code>def</code> is short for &ldquo;define&rdquo; as we&rsquo;re defining a function. As previously explained, we&rsquo;re not obligated to specify the type of anything here.</p>
<h4 id="custom-data-types-classes">Custom Data Types: Classes</h4>
<p>Built-in data structures are fun enough to mess around with, but we also make heavy use of data types of our own creation in Java, that is to say, classes.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Person</span> <span style="color:#f92672">{</span>
	<span style="color:#66d9ef">private</span> String name<span style="color:#f92672">;</span>
	<span style="color:#66d9ef">private</span> <span style="color:#66d9ef">int</span> age<span style="color:#f92672">;</span>
	<span style="color:#66d9ef">private</span> ArrayList<span style="color:#f92672">&lt;</span>Person<span style="color:#f92672">&gt;</span> friends<span style="color:#f92672">;</span>
	
	<span style="color:#66d9ef">public</span> <span style="color:#a6e22e">Person</span><span style="color:#f92672">(</span>String name<span style="color:#f92672">,</span> <span style="color:#66d9ef">int</span> age<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
		<span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">name</span> <span style="color:#f92672">=</span> name<span style="color:#f92672">;</span>
		<span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">age</span> <span style="color:#f92672">=</span> age<span style="color:#f92672">;</span>
	<span style="color:#f92672">}</span>
	
	<span style="color:#66d9ef">public</span> String <span style="color:#a6e22e">getName</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
		<span style="color:#66d9ef">return</span> <span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">name</span><span style="color:#f92672">;</span>
	<span style="color:#f92672">}</span>
	
	<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">setName</span><span style="color:#f92672">(</span>String name<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
		<span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">name</span> <span style="color:#f92672">=</span> name<span style="color:#f92672">;</span>
	<span style="color:#f92672">}</span>
	
	<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">int</span> <span style="color:#a6e22e">getAge</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
		<span style="color:#66d9ef">return</span> <span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">age</span><span style="color:#f92672">;</span>
	<span style="color:#f92672">}</span>
	
	<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">setAge</span><span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> age<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
		<span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">age</span> <span style="color:#f92672">=</span> age<span style="color:#f92672">;</span>
	<span style="color:#f92672">}</span>
	
	<span style="color:#66d9ef">public</span> ArrayList<span style="color:#f92672">&lt;</span>Person<span style="color:#f92672">&gt;</span> <span style="color:#a6e22e">getFriends</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
		<span style="color:#66d9ef">return</span> <span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">friends</span><span style="color:#f92672">;</span>
	<span style="color:#f92672">}</span>
	
	<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">setFriends</span><span style="color:#f92672">(</span>ArrayList<span style="color:#f92672">&lt;</span>Person<span style="color:#f92672">&gt;</span> friends<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
		<span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">friends</span> <span style="color:#f92672">=</span> friends<span style="color:#f92672">;</span>
	<span style="color:#f92672">}</span>
	
	<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">displayFriends</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
		<span style="color:#75715e">// using a foreach loop
</span><span style="color:#75715e"></span>		<span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span>Person friend <span style="color:#f92672">:</span> <span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">friends</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
			System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span>friend<span style="color:#f92672">.</span><span style="color:#a6e22e">getName</span><span style="color:#f92672">());</span>
		<span style="color:#f92672">}</span>
	<span style="color:#f92672">}</span>
	
	<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">addFriend</span><span style="color:#f92672">(</span>Person friend<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
		<span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">friends</span><span style="color:#f92672">.</span><span style="color:#a6e22e">add</span><span style="color:#f92672">(</span>friend<span style="color:#f92672">);</span>
	<span style="color:#f92672">}</span>
<span style="color:#f92672">}</span>

<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Main</span> <span style="color:#f92672">{</span>
	<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">main</span><span style="color:#f92672">(</span>String<span style="color:#f92672">[]</span> args<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
		Person ambika <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Person<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Ambika&#34;</span><span style="color:#f92672">,</span> 18<span style="color:#f92672">);</span>
		Person jess <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Person<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Jess&#34;</span><span style="color:#f92672">,</span> 18<span style="color:#f92672">);</span>
		Person shakib <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Person<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Shakib&#34;</span><span style="color:#f92672">,</span> 18<span style="color:#f92672">);</span>
		ambika<span style="color:#f92672">.</span><span style="color:#a6e22e">addFriend</span><span style="color:#f92672">(</span>jess<span style="color:#f92672">);</span>
		ambika<span style="color:#f92672">.</span><span style="color:#a6e22e">addFriend</span><span style="color:#f92672">(</span>shakib<span style="color:#f92672">);</span>
		
		ambika<span style="color:#f92672">.</span><span style="color:#a6e22e">displayFriends</span><span style="color:#f92672">();</span>
	<span style="color:#f92672">}</span>
<span style="color:#f92672">}</span>
</code></pre></div><p>A popular and age-old complaint about Java is the nonsensical length that custom classes reach due to the tedious nature of getters and setters, which most popular object oriented languages today have at least abstracted away if they&rsquo;re still being used in the background.</p>
<p>Let&rsquo;s look at the above example in Python:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Person</span>:
    <span style="color:#66d9ef">def</span> __init__(self, name, age): <span style="color:#75715e"># This is the constructor</span>
        self<span style="color:#f92672">.</span>name <span style="color:#f92672">=</span> name
	self<span style="color:#f92672">.</span>age <span style="color:#f92672">=</span> age
	self<span style="color:#f92672">.</span>friends <span style="color:#f92672">=</span> []
    
    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">addFriend</span>(self, friend): <span style="color:#75715e"># def is short for define</span>
        self<span style="color:#f92672">.</span>friends<span style="color:#f92672">.</span>append(friend)
    
    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">displayFriends</span>(self): <span style="color:#75715e"># All methods accessing the properties must have self as a parameter</span>
        <span style="color:#66d9ef">for</span> friend <span style="color:#f92672">in</span> self<span style="color:#f92672">.</span>friends:
            <span style="color:#66d9ef">print</span>(friend<span style="color:#f92672">.</span>name)

ambika <span style="color:#f92672">=</span> Person(<span style="color:#e6db74">&#34;Ambika&#34;</span>, <span style="color:#ae81ff">18</span>)
jess <span style="color:#f92672">=</span> Person(<span style="color:#e6db74">&#34;Jess&#34;</span>, <span style="color:#ae81ff">18</span>)
shakib <span style="color:#f92672">=</span> Person(<span style="color:#e6db74">&#34;Shakib&#34;</span>, <span style="color:#ae81ff">18</span>)

ambika<span style="color:#f92672">.</span>addFriend(jess)
ambika<span style="color:#f92672">.</span>addFriend(shakib)
ambika<span style="color:#f92672">.</span>displayFriends()
</code></pre></div><p>I won&rsquo;t go deeper into the specifics of more object oriented features such as inheritance, but the syntax is simple enough that once you have a grasp on the content of this brief tutorial, you should have no problem learning it yourself.</p>
<h3 id="file-io">File IO</h3>
<p>It&rsquo;s easier to write a useful program if the program doesn&rsquo;t lose all memory of previous user interactions every time you shut it down. Reading information from a file (<strong>I</strong>nput) and being able to store data in a file (<strong>O</strong>utput) helps us circumvent that problem.</p>
<p>Let&rsquo;s look at a Java program that creates a file and stores some information in it if the file doesn&rsquo;t already exist, and reads from the file if it does exist.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#f92672">import</span> java.io.*<span style="color:#f92672">;</span>
<span style="color:#f92672">import</span> java.util.Scanner<span style="color:#f92672">;</span>

<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Main</span> <span style="color:#f92672">{</span>
	<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">main</span><span style="color:#f92672">(</span>String<span style="color:#f92672">[]</span> args<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
		File nameFile <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> File<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;./nameFile&#34;</span><span style="color:#f92672">);</span>
		
		<span style="color:#66d9ef">try</span> <span style="color:#f92672">{</span>
			<span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>nameFile<span style="color:#f92672">.</span><span style="color:#a6e22e">createNewFile</span><span style="color:#f92672">())</span> <span style="color:#f92672">{</span>
				Scanner scan <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Scanner<span style="color:#f92672">(</span>System<span style="color:#f92672">.</span><span style="color:#a6e22e">in</span><span style="color:#f92672">);</span>
				System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;What&#39;s your name?&#34;</span><span style="color:#f92672">);</span>
				String name <span style="color:#f92672">=</span> scan<span style="color:#f92672">.</span><span style="color:#a6e22e">nextLine</span><span style="color:#f92672">();</span>
				scan<span style="color:#f92672">.</span><span style="color:#a6e22e">close</span><span style="color:#f92672">();</span>
				
				FileWriter writer <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> FileWriter<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;./nameFile&#34;</span><span style="color:#f92672">);</span>
				writer<span style="color:#f92672">.</span><span style="color:#a6e22e">write</span><span style="color:#f92672">(</span>name<span style="color:#f92672">);</span>
			<span style="color:#f92672">}</span> <span style="color:#66d9ef">else</span> <span style="color:#f92672">{</span>
				Scanner fileReader <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Scanner<span style="color:#f92672">(</span>nameFile<span style="color:#f92672">);</span>
				System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Your name is &#34;</span> <span style="color:#f92672">+</span> fileReader<span style="color:#f92672">.</span><span style="color:#a6e22e">nextLine</span><span style="color:#f92672">());</span>
				fileReader<span style="color:#f92672">.</span><span style="color:#a6e22e">close</span><span style="color:#f92672">();</span>
			<span style="color:#f92672">}</span>
		<span style="color:#f92672">}</span> <span style="color:#66d9ef">catch</span> <span style="color:#f92672">(</span>IOException e<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
			System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;An error occurred&#34;</span><span style="color:#f92672">);</span>
			e<span style="color:#f92672">.</span><span style="color:#a6e22e">printStackTrace</span><span style="color:#f92672">();</span>
		<span style="color:#f92672">}</span>
	<span style="color:#f92672">}</span>
<span style="color:#f92672">}</span>
</code></pre></div><p>The program is simple enough. If a name file doesn&rsquo;t exist, it creates one, asks you for your name and then writes your name to the file. If the file does exist, it simply reads out your name from the file. This is a lot easier in Python:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">from</span> os <span style="color:#f92672">import</span> path

<span style="color:#66d9ef">if</span> path<span style="color:#f92672">.</span>exists(<span style="color:#e6db74">&#34;./nameFile&#34;</span>):
    <span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#34;./nameFile&#34;</span>, <span style="color:#e6db74">&#34;r&#34;</span>) <span style="color:#66d9ef">as</span> nameFile:
        <span style="color:#66d9ef">print</span>(f<span style="color:#e6db74">&#34;Your name is {nameFile.read()}&#34;</span>)
<span style="color:#66d9ef">else</span>:
    <span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#34;./nameFile&#34;</span>, <span style="color:#e6db74">&#34;w+&#34;</span>) <span style="color:#66d9ef">as</span> nameFile:
        name <span style="color:#f92672">=</span> input(<span style="color:#e6db74">&#34;What&#39;s your name? &#34;</span>)
        nameFile<span style="color:#f92672">.</span>write(name)
</code></pre></div><p><code>with</code> is a Python construct for operating on files in a way that automatically closes them once you&rsquo;re done with them. <code>&quot;r&quot;</code> and <code>&quot;w+&quot;</code> are &ldquo;modes&rdquo; for accessing files. <code>&quot;r&quot;</code> is read-only mode, and <code>&quot;w+&quot;</code> is write and create-if-not-exists mode. You can learn more about working with files in python <a href="https://docs.python.org/3/tutorial/inputoutput.html#reading-and-writing-files">here</a>.</p>
<h2 id="synthesis">Synthesis</h2>
<p>If you were able to wrap your head around the examples so far, you now know enough Python syntax to do some relatively useful things. To prove it to you, I&rsquo;m going to walk you through creating a short program that will allow you to store your friends&rsquo; birthdays in a file and retrieve them later if you ever wish to do so.</p>
<p>The program should work like this:</p>
<ol>
<li>You, the user, should be asked whether you&rsquo;re storing a birthday or trying to look one up</li>
<li>If you&rsquo;re storing a birthday, you should be asked whose birthday it is and when it is</li>
<li>If you&rsquo;re looking one up, you should be asked whose birthday you&rsquo;re looking for. Additionally, you should have the option to list all the birthdays you have saved</li>
</ol>
<p>We&rsquo;re going to use a specific type of file to store birthdays called a JSON file. JSON files essentially store HashMaps in files. This saves us the trouble of having to figure out how exactly we want to format the file we store birthdays in. We can simply create a dictionary in Python and write it directly to a JSON file. When we read the JSON file, it will come back to us as a Python dictionary.</p>
<p>Let&rsquo;s get started.</p>
<p>First we&rsquo;re going to want to load up the birthdays file if it exists already, and create it if it doesn&rsquo;t.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">from</span> os <span style="color:#f92672">import</span> path
<span style="color:#f92672">import</span> json

<span style="color:#66d9ef">if</span> path<span style="color:#f92672">.</span>exists(<span style="color:#e6db74">&#34;./birthdays.json&#34;</span>):
    <span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#34;./birthdays.json&#34;</span>, <span style="color:#e6db74">&#34;r&#34;</span>) <span style="color:#66d9ef">as</span> birthday_file:
        <span style="color:#75715e"># Load the birthday_file into a variable called</span>
        <span style="color:#75715e"># birthdays as a dictionary</span>
        birthdays <span style="color:#f92672">=</span> json<span style="color:#f92672">.</span>load(birthday_file)
<span style="color:#66d9ef">else</span>:
    <span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#34;./birthdays.json&#34;</span>, <span style="color:#e6db74">&#34;w+&#34;</span>) <span style="color:#66d9ef">as</span> birthday_file:
        birthdays <span style="color:#f92672">=</span> {} <span style="color:#75715e"># Empty dictionary for now</span>
</code></pre></div><p>As explained by the included comment, <code>json.load</code> is a function that takes a JSON file as input, reads it, and returns a dictionary based on the contents of the JSON file.</p>
<p>Now we should create the interactive part of the program. We can create a menu system by providing numbers alongside options and having the user enter a number to express which option they&rsquo;d like to select:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">menu_1 <span style="color:#f92672">=</span> int(input(<span style="color:#e6db74">&#34;Are you ...</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">1. Storing/Updating a birthday</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">2. Looking up a birthday</span><span style="color:#ae81ff">\n\n</span><span style="color:#e6db74">Your choice: &#34;</span>))

<span style="color:#66d9ef">if</span> menu_1 <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>:
    <span style="color:#f92672">...</span>
</code></pre></div><p>If the user wants to store or update a birthday, all we have to do is</p>
<ol>
<li>Ask whose birthday it is</li>
<li>Ask when the birthday is</li>
<li>Store those two things as an entry in the birthdays dictionary like so</li>
</ol>
<p><code>birthdays[birthday_person] = birthday</code></p>
<p><code>birthday_person</code> is a string and will be used as the key, and <code>birthday</code>, also a string, will be used as the value.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">if</span> menu_1 <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>:
    birthday_person <span style="color:#f92672">=</span> input(<span style="color:#e6db74">&#34;Whose birthday is it? &#34;</span>)
    birthday <span style="color:#f92672">=</span> input(<span style="color:#e6db74">&#34;When is their birthday? (MM/DD/YYYY) &#34;</span>)
    <span style="color:#75715e"># Creating a dictionary entry where the key is their name</span>
    <span style="color:#75715e"># and the value is their birthday</span>
    birthdays[birthday_person] <span style="color:#f92672">=</span> birthday
</code></pre></div><p>We can deal with writing that information to the file later on.</p>
<p>If the user wants to look up a birthday, we should ask if they have a specific person in mind or if they&rsquo;d like to view all the stored birthdays.</p>
<p>There&rsquo;s something to beware of here: if the user wants to look up a specific person&rsquo;s birthday and that person isn&rsquo;t in the dictionary, we need to figure that out and let them know. There are two ways we could do this:</p>
<ol>
<li>Check if <code>birthday_person</code> is in <code>birthdays.keys()</code>. Every dictionary in Python has a method called <code>keys()</code> that returns a list of all the keys in the dictionary, so if the person&rsquo;s name isn&rsquo;t in that list, we don&rsquo;t have their birthday stored</li>
<li>Wait for a <code>KeyError</code> to be thrown and catch the exception it throws. If you try to look up a key in a dictionary when there&rsquo;s no entry with that key, Python will throw an exception called <code>KeyError</code>. You could always catch the exception and respond accordingly, but we&rsquo;ll be going with the first method.</li>
</ol>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">elif</span> menu_1 <span style="color:#f92672">==</span> <span style="color:#ae81ff">2</span>:
    menu_2 <span style="color:#f92672">=</span> int(input(<span style="color:#e6db74">&#34;Would you like to ...</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">1. Look up someone&#39;s birthday</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">2. View all stored birthdays</span><span style="color:#ae81ff">\n\n</span><span style="color:#e6db74">Your choice: &#34;</span>))
    <span style="color:#66d9ef">if</span> menu_2 <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>:
        birthday_person <span style="color:#f92672">=</span> input(<span style="color:#e6db74">&#34;Whose birthday are you looking up? &#34;</span>)
        <span style="color:#75715e"># Check to make sure the entered name is in the dictionary of</span>
        <span style="color:#75715e"># birthdays. The keys() method on a dictionary returns a list of</span>
        <span style="color:#75715e"># keys for that dictionary</span>
        <span style="color:#66d9ef">if</span> birthday_person <span style="color:#f92672">in</span> birthdays<span style="color:#f92672">.</span>keys(): 
            <span style="color:#66d9ef">print</span>(f<span style="color:#e6db74">&#34;{birthday_person}&#39;s birthday is on {birthdays[birthday_person]}&#34;</span>)
        <span style="color:#66d9ef">else</span>:
            <span style="color:#66d9ef">print</span>(f<span style="color:#e6db74">&#34;{birthday_person}&#39;s birthday is not stored.&#34;</span>)
</code></pre></div><p>If we want to print out all the birthdays that are currently stored, all we need to do is <code>for</code> loop over <code>birthdays.keys()</code> like so:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">    <span style="color:#66d9ef">elif</span> menu_2 <span style="color:#f92672">==</span> <span style="color:#ae81ff">2</span>:
        <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;All stored birthdays are listed here:&#34;</span>)
        <span style="color:#66d9ef">for</span> birthday_person <span style="color:#f92672">in</span> birthdays<span style="color:#f92672">.</span>keys():
            <span style="color:#66d9ef">print</span>(f<span style="color:#e6db74">&#34;{birthday_person}&#39;s birthday is on {birthdays[birthday_person]}&#34;</span>)
</code></pre></div><p>Now all we need to do is handle invalid number entries and make sure we write any changes we&rsquo;ve made to the birthdays dictionary to the JSON file:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">    <span style="color:#66d9ef">else</span>:
        <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;Invalid entry&#34;</span>)
<span style="color:#66d9ef">else</span>:
    <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;Invalid entry&#34;</span>)

<span style="color:#75715e"># Update the birthdays file</span>
<span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#34;./birthdays.json&#34;</span>, <span style="color:#e6db74">&#34;w&#34;</span>) <span style="color:#66d9ef">as</span> birthday_file:
    <span style="color:#75715e"># Dump the contents of the birthdays dictionary into the birthday_file</span>
    json<span style="color:#f92672">.</span>dump(birthdays, birthday_file)
</code></pre></div><p>The <code>json.dump</code> function takes a dictionary as well as a JSON file as input, and writes the contents of the dictionary to the file.</p>
<p>Let&rsquo;s put it all together:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">from</span> os <span style="color:#f92672">import</span> path
<span style="color:#f92672">import</span> json

<span style="color:#66d9ef">if</span> path<span style="color:#f92672">.</span>exists(<span style="color:#e6db74">&#34;./birthdays.json&#34;</span>):
    <span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#34;./birthdays.json&#34;</span>, <span style="color:#e6db74">&#34;r&#34;</span>) <span style="color:#66d9ef">as</span> birthday_file:
        <span style="color:#75715e"># Load the birthday_file into a variable called</span>
        <span style="color:#75715e"># birthdays as a dictionary</span>
        birthdays <span style="color:#f92672">=</span> json<span style="color:#f92672">.</span>load(birthday_file)
<span style="color:#66d9ef">else</span>:
    <span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#34;./birthdays.json&#34;</span>, <span style="color:#e6db74">&#34;w+&#34;</span>) <span style="color:#66d9ef">as</span> birthday_file:
        birthdays <span style="color:#f92672">=</span> {} <span style="color:#75715e"># Empty dictionary for now</span>

menu_1 <span style="color:#f92672">=</span> int(input(<span style="color:#e6db74">&#34;Are you ...</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">1. Storing/Updating a birthday</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">2. Looking up a birthday</span><span style="color:#ae81ff">\n\n</span><span style="color:#e6db74">Your choice: &#34;</span>))

<span style="color:#66d9ef">if</span> menu_1 <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>:
    birthday_person <span style="color:#f92672">=</span> input(<span style="color:#e6db74">&#34;Whose birthday is it? &#34;</span>)
    birthday <span style="color:#f92672">=</span> input(<span style="color:#e6db74">&#34;When is their birthday? (MM/DD/YYYY) &#34;</span>)
    <span style="color:#75715e"># Creating a dictionary entry where the key is their name</span>
    <span style="color:#75715e"># and the value is their birthday</span>
    birthdays[birthday_person] <span style="color:#f92672">=</span> birthday
<span style="color:#66d9ef">elif</span> menu_1 <span style="color:#f92672">==</span> <span style="color:#ae81ff">2</span>:
    menu_2 <span style="color:#f92672">=</span> int(input(<span style="color:#e6db74">&#34;Would you like to ...</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">1. Look up someone&#39;s birthday</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">2. View all stored birthdays</span><span style="color:#ae81ff">\n\n</span><span style="color:#e6db74">Your choice: &#34;</span>))
    <span style="color:#66d9ef">if</span> menu_2 <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>:
        birthday_person <span style="color:#f92672">=</span> input(<span style="color:#e6db74">&#34;Whose birthday are you looking up? &#34;</span>)
        <span style="color:#75715e"># Check to make sure the entered name is in the dictionary of</span>
        <span style="color:#75715e"># birthdays. The keys() method on a dictionary returns a list of</span>
        <span style="color:#75715e"># keys for that dictionary</span>
        <span style="color:#66d9ef">if</span> birthday_person <span style="color:#f92672">in</span> birthdays<span style="color:#f92672">.</span>keys(): 
            <span style="color:#66d9ef">print</span>(f<span style="color:#e6db74">&#34;{birthday_person}&#39;s birthday is on {birthdays[birthday_person]}&#34;</span>)
        <span style="color:#66d9ef">else</span>:
            <span style="color:#66d9ef">print</span>(f<span style="color:#e6db74">&#34;{birthday_person}&#39;s birthday is not stored.&#34;</span>)
    <span style="color:#66d9ef">elif</span> menu_2 <span style="color:#f92672">==</span> <span style="color:#ae81ff">2</span>:
        <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;All stored birthdays are listed here:&#34;</span>)
        <span style="color:#66d9ef">for</span> birthday_person <span style="color:#f92672">in</span> birthdays<span style="color:#f92672">.</span>keys():
            <span style="color:#66d9ef">print</span>(f<span style="color:#e6db74">&#34;{birthday_person}&#39;s birthday is on {birthdays[birthday_person]}&#34;</span>)
    <span style="color:#66d9ef">else</span>:
        <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;Invalid entry&#34;</span>)
<span style="color:#66d9ef">else</span>:
    <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;Invalid entry&#34;</span>)

<span style="color:#75715e"># Update the birthdays file</span>
<span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#34;./birthdays.json&#34;</span>, <span style="color:#e6db74">&#34;w&#34;</span>) <span style="color:#66d9ef">as</span> birthday_file:
    <span style="color:#75715e"># Dump the contents of the birthdays dictionary into the birthday_file</span>
    json<span style="color:#f92672">.</span>dump(birthdays, birthday_file)
</code></pre></div><p>If you peek into the <code>birthdays.json</code> file, you&rsquo;ll find that everything is stored almost exactly as they would be if we were creating a dictionary in Python.</p>
<h2 id="closure">Closure</h2>
<p>My hope for this article is that you, the reader, will walk away from it with a drive to learn a programming language that is easy, and yet remains fun and powerful. Being able to work in Python will help you achieve more as a programmer without the headaches that come pre-packaged with Java.</p>
<p>If you are excited to get started writing Python for real, consider checking out <a href="https://rosalogia.me/posts/rucs24-setup/">this post</a> of mine, where I explain how to install Python locally, set up a development environment for it, and start writing Discord bots.</p>
]]></content>
        </item>
        
        <item>
            <title>Setting Up a Discord Bot Development Environment with Python</title>
            <link>/posts/rucs24-setup/</link>
            <pubDate>Sat, 05 Sep 2020 23:36:21 -0400</pubDate>
            
            <guid>/posts/rucs24-setup/</guid>
            <description>This guide was originally written to meet the particular needs of the Rutgers Computer Science - Class of 2024 Discord Bot, and has been included on this site because I personally feel that it is a generally useful and informative guide for those who have never developed outside of an academic environment, and wish to familiarise themselves with the tools and procedures of open source development.
RUCS24-Bot is a Discord bot written in Python.</description>
            <content type="html"><![CDATA[<p>This guide was originally written to meet the particular needs of the
<a href="https://github.com/rosalogia/rucs24-bot">Rutgers Computer Science - Class of 2024 Discord Bot</a>, and has been included on this
site because I personally feel that it is a generally useful and informative guide for those who have never developed outside of
an academic environment, and wish to familiarise themselves with the tools and procedures of open source development.</p>
<p>RUCS24-Bot is a Discord bot written in Python. To begin working on its development, you&rsquo;re going to need five things in particular:</p>
<ul>
<li>Python 3.8 installed</li>
<li>A text editor to write Python in</li>
<li><code>git</code>, a popular version control tool</li>
<li><a href="https://discordpy.readthedocs.io/en/latest/">discord.py</a>, the standard Python discord library</li>
<li>Your own discord bot application registered with Discord to test your additions with</li>
</ul>
<p>In this <strong>comprehensive</strong> guide we&rsquo;re going to describe the steps you&rsquo;ll need to take to set up all of these things and begin contributing to our bot.</p>
<p>Note that this guide is in fact <strong>comprehensive</strong>, more so than any seasoned programmer will need it to be. That is because it is for beginners who have only ever programmed in personal or academic environments. If you already feel comfortable with one of the tools listed above, feel free to use the following table to skip to whichever ones are still relatively new to you.</p>
<h4 id="table-of-contents">Table of Contents</h4>
<ul>
<li><a href="#installing-python">Installing Python</a></li>
<li><a href="#text-editor">Text Editor</a></li>
<li><a href="#installing-and-using-git">Installing and Using Git</a></li>
<li><a href="#Setting-Up-a-Testing-Environment-for-RUCS24-Bot">Setting Up a Testing Environment for RUCS24-Bot</a></li>
</ul>
<h2 id="installing-python">Installing Python</h2>
<p>Python is an interpreted programming language, so we need to install the Python interpreter, as well as the set of tools it usually comes packaged with. Unless you&rsquo;re on a popular distribution of Linux, you should find, download and install Python 3.8.5 or newer from <a href="https://www.python.org/downloads/">this webpage</a>. When running the installer, make sure you select the option to add Python to your PATH. This is crucial for running your Discord bot. If you fail to perform this step, you can always <a href="https://datatofish.com/add-python-to-windows-path/">fix it</a> later, so don&rsquo;t get anxious.</p>
<p>If you&rsquo;re running a popular distribution of Linux, particularly one that isn&rsquo;t commonly used for LTS servers like CentOS, it is unlikely that you will need to install Python through the Python website. Instead, you probably can and <em>should</em> install Python through your distribution&rsquo;s package manager. Here are some instructions for some popular Linux distributions</p>
<h3 id="ubuntu">Ubuntu</h3>
<pre><code>$ sudo apt-get install software-properties-common
$ sudo add-apt-repository ppa:deadsnakes/ppa
$ sudo apt-get update
$ sudo apt-get install python3.8
</code></pre><h3 id="fedora">Fedora</h3>
<pre><code>$ sudo dnf install python38
</code></pre><h3 id="arch-linux">Arch Linux</h3>
<pre><code>$ sudo pacman -S python
</code></pre><p>Note that depending on your distribution, the Python command in your path may point to different versions of Python. You may need to use a command like <code>python3.8</code> or <code>python3</code> instead of <code>python</code> when running the bot.</p>
<h2 id="text-editor">Text Editor</h2>
<p><strong>IMPORTANT</strong>: Read the <a href="#note-on-privacy-and-visual-studio-codium">Note on Privacy &amp; Visual Studio Codium</a> before choosing to install Visual Studio Code.</p>
<p>There is no text editor that is decidedly or objectively the best for your or our purposes. We can only make a recommendation based on what&rsquo;s currently viable, popular, convenient and user-friendly. As you become a more experienced programmer, consider taking the time to familiarise yourself and experiment with various tools for programmers and carefully weigh and evaluate them to choose which one works best for you.</p>
<p>We&rsquo;re going to suggest Visual Studio Code because it&rsquo;s free, open source, popular [which means there are lots of people on the internet asking and answering questions about how to use it or solve its common problems], and has lots of support for writing Python conveniently. It&rsquo;s also a professionally used tool, rather than an environment you will have to leave behind when you are past the &ldquo;learner&rdquo; stage.</p>
<p>You can learn more about Visual Studio Code and download it <a href="https://code.visualstudio.com/">here</a>. Unless you are using a non-debian based or non-fedora based Linux distribution, you should be able to conveniently download and install VS Code from this link. However, if you are using another distribution, like Arch Linux, you should install it through your package manager, or download the provided tarball and extract it.</p>
<p>After installing VS Code, you should install the Python extension:
<img src="/images/py-extension.png" alt="Python Extension"></p>
<p>You can verify that your installation of Python, VS Code, and the Python extension are all working as expected by creating a simple demo project in a folder of your choosing.</p>
<p>In the VS Code <code>File</code> menu, select Open Folder (or if you prefer to learn Keyboard Shortcuts, press <code>Control + K</code> followed by <code>Control + O</code>, you can even keep the Control key held down between both of them if you&rsquo;d like) and select or create a folder that you want your demo project to live in.</p>
<p>Once you select a folder, VS Code will create a workspace there. Click on the New File icon located on the left-hand side of your workspace (or, press <code>Control+Shift+P</code> and type in <code>new file</code> and hit enter) and name it <code>main.py</code>.</p>
<p>The file you created should open up on the right-hand side of your workspace. Begin typing in some code, like &hellip;</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;Hello&#34;</span>)
</code></pre></div><p>If everything is going well, you should see the editor begin to suggest (or &ldquo;auto-complete&rdquo;) common or predicted completions for the code you&rsquo;re in the process of typing out. This feature is incredibly useful, and if you haven&rsquo;t already been taking advantage of it, you should definitely get comfortable with it.</p>
<p>Once you have saved your <code>main.py</code> file, create a terminal within VS Code by clicking on the <code>Terminal</code> menu at the top of the window and selecting <code>New Terminal</code> or with the keyboard shortcut Control+Shift+`.</p>
<p>In the terminal, type in <code>python main.py</code> to run the program. If this does not work, try variations like <code>python3 main.py</code>, <code>py main.py</code> or <code>python38 main.py</code>, as different operating systems may refer to the Python 3.8.5 interpreter differently. If this doesn&rsquo;t work, it may be the case that Python was not successfully added to your PATH. Check the instructions linked above to resolve this issue.</p>
<h3 id="additional-set-up">Additional Set Up</h3>
<h4 id="linting">Linting</h4>
<p>A &ldquo;linter&rdquo; in software development is a tool that analyses your code for bad style. Code should be consistent and readable. Many open source projects enforce a style guide, and so do many professional spaces. Some projects and companies have their own standards for code style, but RUCS24-Bot adheres strictly to the standard set of style guidelines for Python, known as <a href="https://www.python.org/dev/peps/pep-0008/">PEP 8</a>.</p>
<p>Obviously, you&rsquo;re not expected to learn and memorise PEP 8 in order to contribute. Most programmers install a linter, like <a href="https://pypi.org/project/flake8/">flake8</a>, so that their text editor can tell them when they&rsquo;re writing code that doesn&rsquo;t conform to the style guide. Additionally, there are tools like <a href="https://pypi.org/project/black/">Black</a> that you can install and run on all of your code to automatically reformat it according to official style guidelines.</p>
<p>Consider installing <code>flake8</code> and setting up VS Code to use it like so:</p>
<ol>
<li>Run <code>pip install flake8</code> or <code>pip3 install flake8</code> in a terminal.
<ul>
<li>You can open one up right where you are in VS Code by clicking on the <code>Terminal</code> menu at the top of VS Code and selecting <code>New Terminal</code> or pressing Control+Shift+`</li>
</ul>
</li>
<li>Navigate to <code>File &gt; Preferences &gt; Settings</code> or press <code>Control + Comma</code> to open up your settings, and search for &ldquo;flake8&rdquo;</li>
<li>Make sure the following checkbox is ticked: <img src="/images/flake_8.png" alt="Flake8"></li>
</ol>
<p>To test that it is properly working, try creating a comment like this in your code:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e">#Improperly formatted comment</span>
</code></pre></div><p>Then save your file. You should see a squiggle appear under your comment, and hovering over it should display a window describing the problem.</p>
<h3 id="note-on-privacy-and-visual-studio-codium">Note on Privacy and Visual Studio Codium</h3>
<p>Visual Studio Code is an open source text editor developed by Microsoft, however it is commonly known and acknowledged that the version of VS Code that is distributed on the link above includes software that collects and tracks information about your computer usage and sends it to Microsoft for analysis. This is known as &ldquo;telemetry.&rdquo; Some users are, rightfully, uncomfortable with this and are unwilling to use a text editor that violates your privacy to the degree that VS Code does.</p>
<p>However, this problem only exists with the version of VS Code that Microsoft distributes on their website. The problem can be circumvented entirely by downloading and compiling the VS Code source-code. Compiling a large program from source can take a lot of time and can be confusing to new programmers, so a group of people have pre-compiled VS Code without the telemetry features, and are distributing it as <a href="https://vscodium.com/">Visual Studio Codium</a>.</p>
<p>There are no downsides to using this version of VS Code, and it is recommended that you do if you care about your privacy and are uncomfortable with a large corporation receiving data about how you use your computer and its tools. The link above includes more information on the Codium project as well as installation instructions for various operating systems.</p>
<h2 id="installing-and-using-git">Installing and Using Git</h2>
<p><code>git</code> is the name of a software package whose explicit purpose is &ldquo;version control.&rdquo; Version control is the process of keeping track of the changes made to a set of files or documents over a long period of time, such that if there&rsquo;s ever anything wrong with the current version of those files/documents, you will be able to see which particular change caused the problem, and &ldquo;go back in time&rdquo; to a version where the problem didn&rsquo;t exist.</p>
<p>Programmers need this often for shared projects. Sometimes someone will make a change to the codebase that can cause major problems, or might accidentally delete a large portion of the code. How should this be dealt with? The best approach is a version control system that keeps track of &hellip;</p>
<ul>
<li>Who is making a change</li>
<li>Why they&rsquo;re making it</li>
<li>How to undo that change if necessary</li>
</ul>
<p><code>git</code> does all three of these things, and is the most popular version control system for open source software development. In an open source project, several hundreds or even thousands of unique individuals might be responsible for contributing to the codebase, and this leaves lots of room for accidents and mistakes. Using a reliable version control system, as well as backing up the project on a server, helps mitigate any of the easier-to-trigger catastrophes.</p>
<p>A guide for installing <code>git</code> is available <a href="https://git-scm.com/book/en/v2/Getting-Started-Installing-Git">here</a>.</p>
<p>Note that <code>git</code> and GitHub are two separate but [unofficially] related things. While neither one has control or ownership over the other, <code>git</code> is a tool that you install and use locally, and GitHub is a website for hosting, viewing, contributing to and managing <code>git</code> <em>repositories</em>, which are essentially project folders that are version controlled by <code>git</code>.</p>
<p>This means that you can [and should] use <code>git</code> even if your project is not uploaded to GitHub. <code>git</code> is extremely useful even if you are the only person developing your project. It helps you be organised and stops you from making mistakes that might end up wasting a lot of your time.</p>
<p>Let&rsquo;s try using <code>git</code> with the Demo project we made earlier. Once you&rsquo;ve installed <code>git</code>, you should be able to use it from within a terminal you create in VS Code. In your Demo folder, run the command <code>git init</code> to turn your folder into a <code>git</code> repository. You should see VS Code responding to this. Particularly, the <em>source control</em> icon should now have a little 1 next to it, indicating that 1 modification has been detected in the source of the project.</p>
<p><img src="/images/src_control.png" alt="Source control"></p>
<p>When using <code>git</code>, you are in control of which files should be version controlled and which files can safely be ignored by git. Some files have no reason to be version controlled. For example, your personal configuration file for the RUCS24-Bot should never be version controlled, as it should contain the token [essentially the username and password] for your bot account. Because of this, we have created a file in RUCS24-Bot&rsquo;s repository called <code>.gitignore</code>, which <code>git</code> automatically detects and reads to find out which files should never be version controlled. However, this works no differently than simply remembering to never add a certain file to version control. It is simply more convenient.</p>
<p>Let&rsquo;s tell <code>git</code> to track and version control our <code>main.py</code> file. There are two ways you can do this. The first is to use the <code>Stage Changes</code> button (a + symbol) in the VS Code source control panel, type in a &ldquo;commit message&rdquo; which describes the change you made, and then press Ctrl+Enter in the &ldquo;commit message&rdquo; box to finalise your changes. However, keep in mind that even &ldquo;finalised&rdquo; changes can be reverted because <code>git</code> version controls your files.</p>
<p>The second way to go about this is through the command line: you can type in <code>git add main.py</code> to &ldquo;stage&rdquo; your changes, and <code>git commit -m &quot;Your commit message&quot;</code> to finalise those changes.</p>
<p><code>git</code> has tons of subcommands capable of all sorts of complex behaviours, and as a programmer you should strive to learn more of them. Sometimes you will make mistakes with <code>git</code> that will freak you out or make you break into a sweat, or otherwise frustrate you. Be patient with yourself, and practice your ability to find solutions on the internet. There usually will be one waiting for the most patient individual.</p>
<h3 id="using-github">Using GitHub</h3>
<p>GitHub is an online platform for hosting, viewing, contributing to and managing <code>git</code> repositories. RUCS24-Bot is hosted and managed on GitHub, and to contribute to it you will need a GitHub account. We will briefly go over how to use <code>git</code> when working in a repository hosted on GitHub.</p>
<ol>
<li>Create a GitHub account at <a href="https://github.com/">github.com</a></li>
<li>Click on the + button at the top right and select &ldquo;New repository&rdquo;</li>
<li>Name the repository &ldquo;demo&rdquo; and click &ldquo;create repository&rdquo;
<ul>
<li>Do NOT check any of the boxes above the &ldquo;create repository&rdquo; button</li>
</ul>
</li>
</ol>
<p>You should be met with some potentially daunting instructions. These are the ones we need:</p>
<p><img src="/images/github_instructions.png" alt="GitHub instructions"></p>
<p>You should be able to paste in every command listed to your terminal and face few to no problems. However, we should understand what&rsquo;s going on, even if only at the surface level.</p>
<p><code>git remote add origin ...</code> is a command that adds a <code>git</code> &ldquo;remote&rdquo; called &ldquo;origin&rdquo;. A remote is a server, a computer other than yours that yours connects to in order to send and receive data, that hosts a git repository. <code>git</code> allows you to add remote hosts that you can send the contents of your local <code>git</code> repository to. GitHub exists primarily to be a remote host for <code>git</code> repositories, so this makes sense.</p>
<p><code>git branch -M master</code> is a safety measure. GitHub requires that the &ldquo;main&rdquo; branch of your <code>git</code> project is called &ldquo;master&rdquo;. This command forcefully renames the current branch to master, in case you have renamed it for any reason.</p>
<p><code>git push -u origin master</code> is the command that &ldquo;pushes&rdquo; i.e. uploads all of your local commits to the &ldquo;master&rdquo; branch of the &ldquo;origin&rdquo; remote. From this point on, you can push future commits with the command <code>git push</code> rather than typing out the whole <code>git push -u origin master</code>. However, you should know that <code>git push</code> will <em>only</em> upload changes that have been committed. If you have local changes that you have not staged and committed, <code>git push</code> will not upload them. You can experiment with this as much as you would like.</p>
<p>Remember that the basic workflow for adding to a <code>git</code> repository is the following:</p>
<ol>
<li>Make changes</li>
<li><code>git add</code> the changed files</li>
<li><code>git commit -m &quot;A message mentioning the changes you made&quot;</code></li>
<li><code>git push</code></li>
</ol>
<p>Experiment with repeating this process with simple little changes to your <code>main.py</code> file in your Demo project as many times as you need to to get used to it.</p>
<h2 id="setting-up-a-testing-environment-for-rucs24-bot">Setting Up a Testing Environment for RUCS24-Bot</h2>
<p><a href="https://discordpy.readthedocs.io/en/latest/">discord.py</a> is the most popular Python library for developing Discord applications. In this step of the guide, we will first make a &ldquo;fork&rdquo; of the RUCS24-Bot repository, make our own Discord bot account so that we can test it out, and finally we will install <a href="https://discordpy.readthedocs.io/en/latest/">discord.py</a> and run the RUCS24-Bot for testing purposes in our own private testing server. From here, you will be ready to make changes and additions to RUCS24-Bot that might eventually be merged into the version that runs in the RUCS24 server.</p>
<h3 id="forking-and-cloning-rucs24-bot">Forking and Cloning RUCS24-Bot</h3>
<h4 id="forking">Forking</h4>
<p>A &ldquo;fork&rdquo; of an open source software project is a clone of it that is maintained and developed by a person other than the original creator. Forks enable a handful of community behaviours from the get-go. For example, if a person is unhappy with the direction in which an open source project is heading, they can fork the project at a commit where they were happy with it, and continue developing or using it in the direction they prefer. Another reason to fork a repository might be that the original creator is no longer interested or capable of maintaining and growing the project, so a more enthusiastic contributor might fork it and theirs might become the more popular and regularly updated version of the project.</p>
<p>There is a much more common reason to fork a project on GitHub, however. When a person who isn&rsquo;t close friends or associates with the creator of a GitHub repository wants to contribute to that repository, they need a way to edit and suggest changes to the repository that the original maintainer can accept or reject. The most popular way to do this is by having the contributor fork the main project, make the changes they want to see, then make a &ldquo;Pull Request&rdquo; to the main/original repository. A Pull Request is a request on the behalf of the contributor to have the changes on their fork of a project &ldquo;merged&rdquo; into the main project by the main project&rsquo;s maintainer.</p>
<p>If all of this is confusing, consider reading <a href="https://www.dataschool.io/how-to-contribute-on-github/">this guide</a> that explains all of the above in much greater detail with screenshot examples.</p>
<p>Navigate to the <a href="https://github.com/rosalogia/rucs24-bot">RUCS24-Bot repository</a> and click on the &ldquo;Fork&rdquo; button at the top right corner underneath the + symbol you used to create a new repository earlier. This will create a forked repository under your account called <code>rucs24-bot</code> that you can make changes to as you&rsquo;d like. Note, however, that messy and unwanted changes will need to be removed before any Pull Requests are made.</p>
<h4 id="cloning">Cloning</h4>
<p>Open a terminal, either externally or through VS Code, and navigate to a folder that you want to contain your Python projects. On most operating systems, you can navigate to a specific folder with the command <code>cd</code> followed by the proper file path.</p>
<p>On Linux or Mac you might do <code>cd ~/Projects/Python/</code> if you have already created the <code>Projects</code> folder and the <code>Python</code> folder underneath of that.</p>
<p>On Windows, you might do <code>cd C:\Projects\Python\</code> if you have already created those same folders.</p>
<p>If you want to create those folders from the command line, you can use the <code>mkdir</code> command.</p>
<p>For example, <code>mkdir ~/Projects</code> followed by <code>mkdir ~/Projects/Python</code> on Linux or Mac, and <code>mkdir C:\Projects</code> followed by <code>mkdir C:\Projects\Python</code> on Windows.</p>
<p>Once you have navigated to your preferred folder for storing Python projects in your terminal, navigate to your fork of the RUCS24-Bot repository and click on the green &ldquo;Code&rdquo; button and click on the clipboard that appears next to the HTTPS URL as shown here:</p>
<p><img src="/images/clone.png" alt="Clone"></p>
<p>Back in your terminal, now in the directory where you wish to store your Python projects, run the command <code>git clone &lt;repository_url&gt;</code> where <code>&lt;repository_url&gt;</code> is replaced by whatever you have copied from the GitHub repository.</p>
<p>For me this looks like <code>git clone https://github.com/rosalogia/rucs24-bot.git</code>.</p>
<p>Once this command finishes running, you should find that a new folder has been created inside the folder your currently in. This folder contains the code for your fork of the RUCS24-Bot, and it is yours to make changes and additions to. Make sure you open this folder up in VS Code before the next step.</p>
<h3 id="installing-discordpy-and-creating-a-bot-account">Installing discord.py and Creating a Bot Account</h3>
<p>The Python package manager <code>pip</code>, or on some computers, <code>pip3</code> is what we use to install libraries and packages to be used in our Python code. You can use it either by manually specifying a package you would like to install, like so:</p>
<p><code>pip install discord.py</code></p>
<p>Otherwise, if you have a <code>requirements.txt</code> file available that lists all the packages required by a project, you can have <code>pip</code> read from that file and install all the packages listed inside of it. RUCS24-Bot has one of these, so from the terminal in your project folder, run <code>pip install -r requirements.txt</code>.</p>
<p>The library is now installed, but we can&rsquo;t actually run RUCS24-Bot yet. Discord bots are actual accounts that can be invited to servers and interact with the users in a server, but are managed with more restrictions than normal user accounts in order to limit potential exploitation. Nonetheless, any Discord bot that you intend to run will have to have its account created and registered through Discord. After doing this, Discord will give us its &ldquo;token,&rdquo; essentially its username and password encoded in one long string, that we can provide to <a href="https://discordpy.readthedocs.io/en/latest/">discord.py</a> in order to have it log in with our bot&rsquo;s account.</p>
<p>To create a bot account &hellip;</p>
<ol>
<li>Navigate to the <a href="https://discord.com/developers">Discord Developer Portal</a></li>
<li>Select &ldquo;New Application&rdquo; in the top right and give it a name of your choosing</li>
<li>Select the &ldquo;Bot&rdquo; menu on the left hand side of the screen</li>
<li>Click &ldquo;Add Bot&rdquo; on the right-hand side of the screen and confirm that you would like to do this when asked</li>
<li>Find the &ldquo;Token&rdquo; section and click &ldquo;Copy&rdquo;
<ul>
<li>Note: if by chance your token accidentally gets leaked, immediately navigate to this page again and click the &ldquo;Regenerate&rdquo; button that you see next to the &ldquo;Copy&rdquo; button. This will stop anyone who has come across your bot&rsquo;s token from logging in with it and doing potentially destructive things in the servers you&rsquo;ve invited your bot to.</li>
</ul>
</li>
</ol>
<p>Now that you have the bot&rsquo;s token copied, you have to create a <code>config.json</code> file that RUCS24-Bot can look into in order to find the bot&rsquo;s token and log in with it. Create a new file in the project folder with VS Code called <code>config.json</code> that looks like this</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">{
	<span style="color:#f92672">&#34;botToken&#34;</span> : <span style="color:#e6db74">&#34;PASTE_YOUR_TOKEN_BETWEEN_QUOTES_HERE&#34;</span>
}
</code></pre></div><p>We are getting closer and closer to having a fully running version of the RUCS24-Bot that you can play with and test while developing it further. There are a few more important steps.</p>
<p>Firstly, you should create an empty Discord server of your own that you can invite your bot account to.</p>
<p><img src="/images/server_create.png" alt="Server Create"></p>
<p>Now we will invite the bot to the server. Return to the page on <a href="https://discord.com/developers">discord.com</a> where you created your bot. On the left-hand side, select &ldquo;General Information&rdquo; and find the section labelled &ldquo;Client ID&rdquo;.</p>
<p>In order to invite your bot to your server, you must create a special link that incorporates its client id that looks like this:</p>
<p><a href="https://discord.com/api/oauth2/authorize?client_id=YOUR_CLIENT_ID_GOES_HERE&amp;scope=bot&amp;permissions=8">https://discord.com/api/oauth2/authorize?client_id=YOUR_CLIENT_ID_GOES_HERE&amp;scope=bot&amp;permissions=8</a></p>
<p>This link will not work until you replace the capitalised text with your bot&rsquo;s client id. Once you do replace the text and navigate to the link, you will be prompted to select which server [of those in which you are an administrator] you would like to invite the bot to. Select the one you recently created.</p>
<p>You should find that your bot account has popped up in your server, but that it is offline. We are one step away from fixing this.</p>
<p>Return to your terminal in VS Code and, finally, run <code>python main.py</code>. You should find that your bot begins to run after a few seconds, and that your bot account is online. You can test it out with the <code>!help</code> command, which will show you how to access its other features.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Congratulations on making it through this guide! It is entirely too long, but it is <em>comprehensive</em>. Hopefully those who were looking for such a comprehensive guide are satisfied by this one.</p>
<p>If you are impatient (which isn&rsquo;t bad; enthusiasm is good), you may begin messing with the bot&rsquo;s code right away by accessing the <a href="https://github.com/rosalogia/rucs24-bot/blob/master/CONTRIBUTING.md#cog-quickstart">Cog Quickstart</a> in the contribution guide and following along, then editing it to your pleasure. You may also observe and tinker with other existing cogs to understand how they work and how the library works in general. You can explore the library further and read about how it works at its <a href="https://discordpy.readthedocs.io/en/latest/#documentation-contents">official documentation</a> webpage.</p>
<p>We hope you will enjoy working on RUCS24-Bot, learn valuable skills while doing so, and that you will never have to read anything of this length to get up and running with an open source project ever again. A lot of this information will transfer over to other projects, so try not to consider it time wasted! Your time and attention is much appreciated, and so are your contributions to RUCS24-Bot.</p>
]]></content>
        </item>
        
    </channel>
</rss>
